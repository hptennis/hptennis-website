<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">

  <title>Hampden Park Tennis</title>

  <!-- Font Awesome -->
  <!-- <link rel="stylesheet" href="css/font-awesome/font-awesome.css"> -->

  <!-- Bootstrap core CSS -->
  <!-- <link href="css/bootstrap.min.css" rel="stylesheet"> -->

  <!-- Material Design Bootstrap -->
  <!-- <link href="css/mdb.min.css" rel="stylesheet"> -->

  <!-- <link href="css/style.css" rel="stylesheet"> -->

  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/1.4.6/tailwind.min.css" rel="stylesheet">


</head>




<body class="relative">
  <div class="bg-gray-200 py-24 min-h-screen">
    <div class="container mx-auto w-full h-full">
      <nav class="flex justify-right space-x-4">
        <a href="/" class="font-bold px-3 py-2 text-green-700 rounded-lg hover:bg-green-500 hover:text-white">Home</a>
        <a href="/match-calendar.html"
          class="font-bold px-3 py-2 text-green-700 rounded-lg hover:bg-green-500 hover:text-white">Match Calendar</a>
        <a href="https://clubspark.lta.org.uk/HampdenParkTennisClub/Booking"
          class="font-bold px-3 py-2 text-green-700 rounded-lg hover:bg-green-500 hover:text-white">Court Booking</a>
        <a href="https://competitions.lta.org.uk/sport/tournament.aspx?id=9c33bbb9-7c2b-419b-b02a-9bb72953dde3"
          class="font-bold px-3 py-2 text-green-700 rounded-lg hover:bg-green-500 hover:text-white">Tennis Sussex
          Leagues</a>
        <!-- <a href="/projects" class="font-bold px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900">Projects</a> -->
        <!-- <a href="/reports" class="font-bold px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900">Reports</a> -->
      </nav>


      <div class="max-w-screen-lg mx-auto w-full h-full flex flex-col items-center justify-center">
        <div x-data="dataTable()" x-init="
          initData()
          $watch('searchInput', value => {
            search(value)
          })" class="bg-white p-5 shadow-md w-full flex flex-col">

          <div class="flex flex-col text-center">
            <h1 class="font-bold text-green-800 text-3xl pb-8">Hampden Park Tennis Teams</h1>


            <p class="text-xl max-w-prose pb-4">The club runs 4 Ladies and 4 Men's Teams competing in the Sussex
              leagues.
              Home matches are normally played on Sundays which can mean courts are difficualt to get hold of on Sunday
              Mornings.</p>

            <p class="text-xl max-w-prose pb-4">The fixtures for the current season are shown below.</p>

          </div>

          <div class="flex flex-col text-center">
            <h2 class="font-medium px-2 py-3 text-slate-200">Fixtures Summer 2023</h2>
          </div>

          <div class="flex flex-row content-center">
            <button type="button" x-on:click="search('')"
              class="text-green-700 hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-900">All</button>
            <!--<button type="button" x-on:click="search('Home')"
              class="text-green-700 hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-900">Home</button>
            <button type="button" x-on:click="search('Away')"
              class="text-orange-700 hover:text-white border border-orange-700 hover:bg-orange-800 focus:ring-4 focus:outline-none focus:ring-orange-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-orange-500 dark:text-orange-500 dark:hover:text-white dark:hover:bg-orange-600 dark:focus:ring-orange-900">Away</button>
            -->

          </div>

          <div class="flex flex-row content-center">
            <button type="button" x-on:click="search('L1d')"
              class="text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">Ladies
              1</button>
            <button type="button" x-on:click="search('L2d')"
              class="text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">Ladies
              2</button>
            <button type="button" x-on:click="search('L3d')"
              class="text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">Ladies
              3</button>
            <button type="button" x-on:click="search('L4d')"
              class="text-red-700 hover:text-white border border-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">Ladies
              4</button>

          </div>

          <div class="flex flex-row">

            <button type="button" x-on:click="search('M1S')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              1S</button>
            <button type="button" x-on:click="search('M2S')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              2S</button>
            <button type="button" x-on:click="search('M1D')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              1D</button>
            <button type="button" x-on:click="search('M2D')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              2D</button>
            <button type="button" x-on:click="search('M3D')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              3D</button>
            <button type="button" x-on:click="search('M4D')"
              class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800">Mens
              4D</button>


          </div>

          <div class="flex justify-between items-center">
            <div class="flex space-x-2 items-center">
              <p>Show</p>
              <select x-model="view" @change="changeView()">
                <!-- <option value="5">5</option> -->
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
            </div>
            <div>
              <input x-model="searchInput" type="text" class="px-2 py-1 border rounded focus:outline-none"
                placeholder="Search...">
            </div>
          </div>
          <table class="mt-5">
            <thead class="border-b-2">
              <th width="10%">
                <div class="flex space-x-2">
                  <span>
                    Date
                  </span>
                  </span>
                  <div class="flex flex-col">
                    <svg @click="sort('Date', 'asc')" fill="none" stroke-linecap="round" stroke-linejoin="round"
                      stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="h-3 w-3 cursor-pointer text-gray-500 fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Date' && sorted.rule === 'asc'}">
                      <path d="M5 15l7-7 7 7"></path>
                    </svg>
                    <svg @click="sort('Date', 'desc')" fill="none" stroke-linecap="round" stroke-linejoin="round"
                      stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="h-3 w-3 cursor-pointer text-gray-500 fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Date' && sorted.rule === 'desc'}">
                      <path d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </th>
              <th width="10%">
                <div class="flex items-center space-x-2">
                  <span class="">
                    Day
                  </span>
                  <!-- <div class="flex flex-col">
                      <svg @click="sort('job', 'asc')" fill="none" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" viewBox="0 0 24 24" stroke="currentColor" class="text-gray-500 h-3 w-3 cursor-pointer fill-current" x-bind:class="{'text-blue-500': sorted.field === 'job' && sorted.rule === 'asc'}"><path d="M5 15l7-7 7 7"></path></svg>
                      <svg @click="sort('job', 'desc')" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" viewBox="0 0 24 24" stroke="currentColor" class="text-gray-500 h-3 w-3 cursor-pointer fill-current" x-bind:class="{'text-blue-500': sorted.field === 'job' && sorted.rule === 'desc'}"><path d="M19 9l-7 7-7-7"></path></svg>
                    </div> -->
                </div>
              </th>
              <th width="20%">
                <div class="flex items-center space-x-2">
                  <span class="">
                    Home Team
                  </span>
                  <div class="flex flex-col">
                    <svg @click="sort('Loc', 'asc')" fill="none" fill="none" stroke-linecap="round"
                      stroke-linejoin="round" stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Loc' && sorted.rule === 'asc'}">
                      <path d="M5 15l7-7 7 7"></path>
                    </svg>
                    <svg @click="sort('Loc', 'desc')" fill="none" stroke-linecap="round" stroke-linejoin="round"
                      stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Loc' && sorted.rule === 'desc'}">
                      <path d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </th>
              <th width="30%">
                <div class="flex items-center space-x-2">
                  <span>
                    Away Team
                  </span>
                  <div class="flex flex-col">
                    <svg @click="sort('Opposition', 'asc')" fill="none" fill="none" stroke-linecap="round"
                      stroke-linejoin="round" stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Opposition' && sorted.rule === 'asc'}">
                      <path d="M5 15l7-7 7 7"></path>
                    </svg>
                    <svg @click="sort('Opposition', 'desc')" fill="none" stroke-linecap="round" stroke-linejoin="round"
                      stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'Opposition' && sorted.rule === 'desc'}">
                      <path d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </th>
              <th width="10%">
                <div class="flex items-center space-x-2">
                  <span class="">
                    Team
                  </span>
                  <div class="flex flex-col">
                    <svg @click="sort('country', 'asc')" fill="none" fill="none" stroke-linecap="round"
                      stroke-linejoin="round" stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'country' && sorted.rule === 'asc'}">
                      <path d="M5 15l7-7 7 7"></path>
                    </svg>
                    <svg @click="sort('country', 'desc')" fill="none" stroke-linecap="round" stroke-linejoin="round"
                      stroke-width="4" viewBox="0 0 24 24" stroke="currentColor"
                      class="text-gray-500 h-3 w-3 cursor-pointer fill-current"
                      x-bind:class="{'text-blue-500': sorted.field === 'country' && sorted.rule === 'desc'}">
                      <path d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </th>
            </thead>
            <tbody>
              <template x-for="(item, index) in items" :key="index">
                <tr x-show="checkView(index + 1)" class="hover:bg-gray-200 text-gray-900 text-xs">
                  <td class="py-3">
                    <span x-text="item.Date"></span>
                  </td>
                  <td class="py-3">
                    <span x-text="item.Day"></span>
                  </td>
                  <td class="py-3">
                    <span x-text="item.Home"></span>
                  </td>
                  <td class="py-3">
                    <span x-text="item.Away"></span>
                  </td>
                  <td class="py-3">
                    <span x-text="item.Team"></span>
                  </td>
                </tr>
              </template>
              <tr x-show="isEmpty()">
                <td colspan="5" class="text-center py-3 text-gray-900 text-sm">No matching records found oh NO!.</td>
              </tr>
            </tbody>
          </table>
          <div class="flex mt-5">
            <div class="border px-2 cursor-pointer" @click.prevent="changePage(1)">
              <span class="text-gray-700">First</span>
            </div>
            <div class="border px-2 cursor-pointer" @click="changePage(currentPage - 1)">
              <span class="text-gray-700"></span>
            </div>
            <template x-for="item in pages">
              <div @click="changePage(item)" class="border px-2 cursor-pointer"
                x-bind:class="{ 'bg-gray-300': currentPage === item }">
                <span class="text-gray-700" x-text="item"></span>
              </div>
            </template>
            <div class="border px-2 cursor-pointer" @click="changePage(currentPage + 1)">
              <span class="text-gray-700">></span>
            </div>
            <div class="border px-2 cursor-pointer" @click.prevent="changePage(pagination.lastPage)">
              <span class="text-gray-700">Last</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.3.5/dist/alpine.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js"></script>
  <!-- <script src="https://momentjs.com/downloads/moment.min.js"></script> -->
  <script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
  <script>
    let data = []
    let fieldA = null;
    let fieldB = null;
  </script>
  <script>
    window.dataTable = function () {
      return {
        items: [],
        view: 10,
        searchInput: '',
        pages: [],
        offset: 10,
        pagination: {
          total: data.length,
          lastPage: Math.ceil(data.length / 10),
          perPage: 10,
          currentPage: 1,
          from: 1,
          to: 1 * 10
        },
        currentPage: 1,
        sorted: {
          field: 'name',
          rule: 'asc'
        },
        initData() {
          fetch(
            "https://opensheet.elk.sh/1Ae6NvQGnRPK4hxNryVUyjDPQeub5kSvch-gl8z8s8bE/Master-Fixture-List"
          )
            .then((res) => res.json())
            .then((xdata) => {
              data = xdata
              this.items = xdata.sort(this.compareOnKey('Date', 'asc'))
              //this.items = data.sort(this.compareOnKey('name', 'asc'))
              this.pagination.total = data.length
              this.pagination.lastPage = Math.ceil(data.length / 10),
                this.pagination.perPage = 10,
                this.pagination.currentPage = 1,
                this.pagination.from = 1,
                this.pagination.to = 1 * 10

              this.changePage(1)
              this.showPages()


              //xdata.forEach((row) => {
              // Do something with each row here.
              // console.log(matchData[1].Oppostion)
              //''});
            });


        },
        compareOnKey(key, rule) {
          return function (a, b) {
            if (key === 'Date' || key === 'Day' || key === 'Loc' || key === 'Oppostion') {
              let comparison = 0

              if (key === 'Date') {
                fieldA = toDate(a[key])
                fieldB = toDate(b[key])
                // let d2 =  dayjs(b[key], "DD/MM/YYYY")
                // console.info(d1)
              }
              else {

                fieldA = a[key].toUpperCase()
                fieldB = b[key].toUpperCase()
              }
              if (rule === 'asc') {
                if (fieldA > fieldB) {
                  comparison = 1;
                } else if (fieldA < fieldB) {
                  comparison = -1;
                }
              } else {
                if (fieldA < fieldB) {
                  comparison = 1;
                } else if (fieldA > fieldB) {
                  comparison = -1;
                }
              }
              return comparison
            } else {
              if (rule === 'asc') {
                return a.year - b.year
              } else {
                return b.year - a.year
              }
            }
          }
        },
        checkView(index) {
          return index > this.pagination.to || index < this.pagination.from ? false : true
        },
        checkPage(item) {
          if (item <= this.currentPage + 10) {
            return true
          }
          return false
        },
        search(value) {
          console.log("Search:" + value)
          if (value.length > 1) {
            const options = {
              shouldSort: true,
              keys: ['Date', 'Home', 'Away', 'Team'],
              threshold: 0
            }
            const fuse = new Fuse(data, options)
            this.items = fuse.search(value).map(elem => elem.item)
          } else {
            this.items = data
          }
          console.log(this.items.length)

          this.changePage(1)
          this.showPages()
        },
        sort(field, rule) {
          this.items = this.items.sort(this.compareOnKey(field, rule))
          this.sorted.field = field
          this.sorted.rule = rule
        },
        changePage(page) {
          if (page >= 1 && page <= this.pagination.lastPage) {
            this.currentPage = page
            const total = this.items.length
            const lastPage = Math.ceil(total / this.view) || 1
            const from = (page - 1) * this.view + 1
            let to = page * this.view
            if (page === lastPage) {
              to = total
            }
            this.pagination.total = total
            this.pagination.lastPage = lastPage
            this.pagination.perPage = this.view
            this.pagination.currentPage = page
            this.pagination.from = from
            this.pagination.to = to
            this.showPages()
          }
        },
        showPages() {
          const pages = []
          let from = this.pagination.currentPage - Math.ceil(this.offset / 2)
          if (from < 1) {
            from = 1
          }
          let to = from + this.offset - 1
          if (to > this.pagination.lastPage) {
            to = this.pagination.lastPage
          }
          while (from <= to) {
            pages.push(from)
            from++
          }
          this.pages = pages
        },
        changeView() {
          this.changePage(1)
          this.showPages()
        },
        isEmpty() {
          return this.pagination.total ? false : true
        },
        compareDate(ds1, ds2) {
          const d = "23/10/2015"; // Oct 23

          //const dateParts = dateString.split("/");

          // month is 0-based, that's why we need dataParts[1] - 1
          //var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]); 
          let d1 = toDate(ds1)
          let d2 = toDate(ds2)
          console.log(d2)

        }

      }
    }
    function toDate(ds) {
      const dP = ds.split("/");
      d = new Date(+dP[2], dP[1] - 1, +dP[0])
      //console.log(typeof (d), d)
      return d
    }
  </script>
</body>